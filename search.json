[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Management",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#what-is-this-tutorial-about",
    "href": "index.html#what-is-this-tutorial-about",
    "title": "Data Management",
    "section": "What is this tutorial about?",
    "text": "What is this tutorial about?\nThis tutorial provides a comprehensive guide to building a data management pipeline using various programming languages and tools. It aims at equiping you with the knowledge and skills necessary to efficiently collect, manage, and analyze data, particularly in the context of survey data.\nYou will learn how to leverage R for data manipulation and reporting, utilize Python for scripting and automation, and manage databases with MySQL. Additionally, the tutorial will introduce you to Batch scripting for task automation in Windows environments.\nA key focus will be on Survey Solutions, a robust platform for data collection, where you will gain familiarity with its API for downloading and managing survey data. By working with the ssaw Python package, you will learn how to integrate these tools to create a seamless data management pipeline.\nOverall, this tutorial is designed for individuals who have a basic understanding of the prerequisites and are looking to enhance their skills in data management and analysis through practical, hands-on experience.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Data Management",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore starting this tutorial, ensure you have a basic understanding of the following:\nSurvey Solutions\n\nBasic understanding of the Survey Solutions platform.\n\n\n\nFamiliarity with its API for downloading and managing survey data.\nAbility to work with the ssaw Python package for Survey Solutions integration.\n\nPython\n\nExperience with scripting and automation.\nKnowledge of using libraries like pandas for data manipulation.\nAbility to integrate Python scripts with APIs.\n\nR\n\nFamiliarity with data manipulation and reporting.\nComfortable working with data frames and R scripts.\nAbility to use packages for data analysis.\n\nMySQL\n\nUnderstanding of database management and querying.\nAbility to create databases and write SQL queries.\nComfortable managing data in MySQL environments.\n\nBatch Scripting:\n\nFamiliarity with automating tasks in Windows.\nAbility to write and run batch files for task automation.\n\n\n\n\n\n\n\nNote\n\n\n\nWhile proficiency is not required in any of these areas, a good level of familiarity will be beneficial for following the tutorial.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This tutorial is about automating data management and report writing. The growing need for timely, accurate, and efficient data processing has made automation not just a luxury but a necessity in modern data management practices. This tutorial will take you on a step-by-step journey to streamline your data management processes by leveraging four powerful tools: Batch scripting, Python, SQL, and R.\nSurvey Solutions, a widely-used survey data collection platform, offers rich capabilities for collecting complex datasets. However, the true power lies in how quickly and effectively you can automate the retrieval, cleaning, and analysis of this data. This tutorial aims to bridge that gap. Whether you’re managing data for health research, social impact projects, or other sectors, automating the extraction and transformation of data will save hours of manual work and reduce the risk of human error.\nIn this tutorial, we will walk you through creating a robust data management pipeline, starting with Python to download data from the Survey Solutions via API. We will then transition to R to perform in-depth data management and generate dynamic reports. After the reports have been generated will get back to Python then share the reports with the stake-holders. We will then use SQL to track the progress of report sharing. Batch scripts will be used in automating all these processes. By the end of this guide, you will have a seamless workflow that not only automates your data processes but also enhances their accuracy and scalability.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data-download.html",
    "href": "data-download.html",
    "title": "2  Data Download",
    "section": "",
    "text": "2.1 Introduction\nIn the ever-evolving landscape of data collection, Survey Solutions stands out as a powerful and versatile tool designed to streamline the process. Developed by the World Bank, this innovative platform enables researchers and organizations to gather high-quality data efficiently and effectively. With its user-friendly interface and robust features, Survey Solutions empowers field staff to conduct surveys, manage complex questionnaires, and ensure data integrity in real-time.\nOne of the standout capabilities of Survey Solutions is its robust API, which allows for seamless integration with other systems and applications. This feature enables users to automate data collection processes, enhance data management, and facilitate real-time data access, making it easier to incorporate Survey Solutions into existing workflows.\nBy harnessing the capabilities of Survey Solutions, users can customize surveys to meet specific research needs, collect data through mobile devices, and utilize advanced tools for monitoring and data analysis. This flexibility not only enhances the quality of data collected but also accelerates decision-making processes in various sectors, including healthcare, education, and social research.\nWhether you’re a seasoned researcher or a novice data collector, Survey Solutions provides the resources and support necessary to transform data collection into a seamless and impactful experience. Embrace the future of data gathering with Survey Solutions—where precision meets efficiency.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Download</span>"
    ]
  },
  {
    "objectID": "data-download.html#survey-solution-accounts",
    "href": "data-download.html#survey-solution-accounts",
    "title": "2  Data Download",
    "section": "2.2 Survey Solution Accounts",
    "text": "2.2 Survey Solution Accounts\nIn Survey Solutions, there are six main types of user accounts, each with different roles and responsibilities. Here’s a breakdown:\n\nAdministrator:\n\n\nRole: Manages the technical aspects of the Survey Solutions server.\nResponsibilities:\n\nSet up and configure the Survey Solutions server.\nManage server performance, updates, and backups.\nHandle user management (creation and deletion of accounts).\nEnsure security, including password management and system access.\nMonitor server health and log files.\n\n\n\nHeadquarters (HQ):\n\n\nRole: Manages the entire survey process, including questionnaire management, assignments, and overall data flow.\nResponsibilities:\n\nCreate and manage survey assignments.\nMonitor survey progress and interview status.\nAccess all collected data.\nAdminister users and roles.\nHandle questionnaire uploads and server management.\n\n\n\nSupervisor:\n\n\nRole: Oversees fieldwork operations, manages interviewers, and reviews their work.\nResponsibilities:\n\nReview completed interviews submitted by interviewers.\nApprove or reject interviews.\nManage interviewers and assignments within their team.\nMonitor the status of interviews and progress.\n\n\n\nInterviewer:\n\n\nRole: Conducts interviews and collects data in the field using a tablet or computer.\nResponsibilities:\n\nConduct face-to-face interviews with respondents.\nUpload collected data to the server for review.\nCommunicate with supervisors on any issues related to interviews.\n\n\n\nObserver:\n\n\nRole: Has read-only access to monitor the progress of the survey without the ability to make changes.\nResponsibilities:\n\nView interviews and their status.\nGenerate reports and monitor survey performance.\nCannot edit or approve interviews.\n\n\n\nAPI User:\n\n\nRole: Provides programmatic access to Survey Solutions through its API for automation and integration purposes.\nResponsibilities:\n\nFetch survey data via the API for external analysis.\nAutomate the survey workflow by integrating with other systems (e.g., data processing or visualization tools).\nCreate assignments, retrieve reports, and manage users programmatically.\n\n\nOf great importance for data management workflow is the API User. You need to talk to the Administrator, who most of the times is either system administrator or programmer, who set up and configured the Survey Solutions server to create for you an API user.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Download</span>"
    ]
  },
  {
    "objectID": "data-download.html#survey-solution-api",
    "href": "data-download.html#survey-solution-api",
    "title": "2  Data Download",
    "section": "2.3 Survey Solution API",
    "text": "2.3 Survey Solution API\nSurvey Solutions includes a powerful and flexible API which allows automating some tasks and allows our users to build larger systems, which may compliment Survey Solutions to achieve larger goals. \nSome examples of use could be:\n\nschedule periodic export of collected data\nan external dashboard or monitoring and reporting system, which updates some indicators every night and publishes them to a website, or\nan external checking and validation system which verifies collected data against some external sources of information and rejects automatically the incorrect interviews, or\nan integrated system, which utilizes Survey Solutions for data collections tasks and a statistical package for continuous analysis,\nfacility management, inventory and price monitoring systems, etc, etc.\n\nFor the purposes of this tutorial, our focus will be on the first use case.\n\n2.3.1 API Clients\nThere are a number of API clients for Survey Solutions. They are listed below.\n\n\n\n\n\n\n\n\n\nAPI Clients\nMaintainer\nSpecific Name\nLanguage\n\n\n\n\n.NET package\nAndrii Kozhyn\nSurveySolutionsClient\nC#\n\n\nPowerShell module\nZurab Sajaia\nSSAW\nPowershell\n\n\nPython package\nZurab Sajaia\nssaw\nPython\n\n\nR package\nMichael Wild\nSurveySolutionsAPI\nR\n\n\nR package\nArthur Shaw\nsusoapi\nR\n\n\nR package\nLena Nguyen\nSuSoAPI\nR\n\n\nStata package\nSergiy Radyakin\nsusoapi\nStata\n\n\n\nFor more details about each of the clients you check here.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Download</span>"
    ]
  },
  {
    "objectID": "data-download.html#python-package",
    "href": "data-download.html#python-package",
    "title": "2  Data Download",
    "section": "2.4 Python Package",
    "text": "2.4 Python Package\nI use ssaw Python package as a Survey Solutions API wrapper. It is easy to use and very flexible. We’ll focus on key data management procedures, but full details are in the online documentation.\n\n2.4.1 Installation\nTo install ssaw, simply run this command in your terminal:\n\npip install ssaw\n\n\n2.4.2 Modules\nI use the following modules in data management pipeline especially when working with Survey Solutions:\n\nimport requests\nfrom ssaw import Client, ExportApi, QuestionnairesApi, models\nfrom time import sleep\nimport configparser\nimport os\n\n\n\n2.4.3 Connect to server\nTo communicate with Survey Solutions server, you first need to instantiate a client. You remember the API user you created or was created for you? It is necessary at this point. To connect to Survey Solution you need four pieces of information i.e.\n\nURL for the server\nAPI username\nAPI password\nName of the work space\n\n\ndef check_net(url='http://www.google.com/', timeout=5):\n    try:\n        _ = requests.head(url, timeout=timeout)\n        print(f'Connection available on: {url}')\n        return True\n    except requests.ConnectionError:\n        return False\n    \nnet_available = check_net()\n\nConnection available on: http://www.google.com/\n\n\n\nif net_available:\n  client = Client(url=\"None\", \n  api_user=\"None\", \n  api_password=\"None\", \n  workspace='primary')\nelse:\n  print(\"Internet not available\")\n\n\nParameters\n\n\nurl (str) – URL of the headquarters app\napi_user (Optional[str]) – API user name\napi_password (Optional[str]) – API user password\ntoken (Optional[str]) – Authorization token\nworkspace (str) – Name of the workspace. If None, “primary” will be assumed\n\n\n\nThere are two ways to provide these parameters.\n\nOne is to hard-code them in the script as shown below:\n\nif net_available:\n  client = Client(url=\"90-12-34-26\", \n  api_user='JohnDoes', \n  api_password='Supersecret', \n  workspace='primary')\nelse:\n  print(\"Internet not available\")\n\n\nThis method is insecure for handling sensitive data. If you push this script to a public repository, anyone can access these details. Best practices in data management require keeping sensitive information secure and out of reach of unauthorized individuals.\n\nUsing config files\nA more secure way to handle sensitive data is by using configuration files. Instead of hard-coding credentials directly in the script, you can store them in a separate config file and load them securely. There are several common formats for configuration files such as .ini files (Initialization files), .json files (JavaScript Object Notation), .yaml files (YAML Aint Markup Language), .properties files (Java-style-value pair format). I decided to use .ini because they are lightweight and easy-to-use configuration files that provide a straightforward way to store settings in a simple key-value format. They allow for comments and enable dividing the configuration into sections.\n\n# Initialize the parser\nconfig = configparser.ConfigParser()\n\nif not os.path.exists('config.ini'):\n\n   # Add sections and set values for Survey Solutions\n    config['susol'] = {\n        'url': None,\n        'api_user': None,\n        'api_password': None,\n        'workspace': None,\n        'quiz_id': None\n\n    }\n\n  # Add the email address and password\n    config['email'] = {\n        'email_address': None,\n        'pass_word':None\n    }\n\n  # Add the email address and password\n    config['mysql'] = {\n        'host': None,\n        'database': None,\n        'user': None,\n        'password': None\n    }\n\nelse:\n  config.read('config.ini')\n\n# Retrieve the details \n\nurl_ss = config['susol']['url']\napiuser = config['susol']['api_user']\npasswd = config['susol']['api_password']\nwkspace = config['susol']['workspace']\nquizid = config['susol']['quiz_id']\n\n# Access credentials\n\nif net_available:\n  try:\n    client = Client(url=url_ss,\n    api_user = apiuser, \n    api_password=passwd,\n    workspace=wkspace)\n  except:\n    client=None\nelse:\n  client=None\n  print(\"Internet not available\")\n\n\nTo prevent sensitive data from being exposed, follow these security practices:\n\nAdd Config File to .gitignore: Ensure the config file is not included in version control (e.g., GitHub) by adding it to .gitignore.\nRestrict File Permissions: Limit who can read the config file by changing its permissions so only authorized users can access it.\n\n\nif client:\n  try:\n    for q in QuestionnairesApi(client).get_list(questionnaire_id=quizid):\n      print(q.title, q.version)\n  except:\n    print(\"Unable to connect to server\")\nelse:\n  print(\"Unable to connect to the server\")\n\nSurvey Solutions Training 1\n\n\nBy this time you will get the questionnaire titles and versions. If not, you may need to check that you have keyed in the correct credentials and also got the questionnaire id, work space right.\n\n\n2.4.4 Export Data\nThe export module contains methods to find and download an already generated data package, or trigger and manage a new generation job.\nAccessing Questionnaire Id Web Interface\nBelow are steps to access your questionnaire id:\n\n\n\n\n\nLog in into the Survey Solution and pick the right workspace\n\n\n\n\n\n\n\nClick on desired questionnaire then select details\n\n\n\n\n\n\n\nLocate the questionnaire at the address bar\n\n\n\n\nBetween the Details/ and $ sign is the id.\nAccessing Questionnaire Id Using API\n\nif client:\n  for q in QuestionnairesApi(client).get_list():\n      print(q)\nelse:\n  print(\"You did not connect to the server\")\n\nQuestionnaire(id=f144e3a11dfc4e54a7fd28716d3a32e0$1, questionnaire_id=f144e3a11dfc4e54a7fd28716d3a32e0, version=1, title=Malaria Survey Test, variable=mal_survey)\nQuestionnaire(id=9e4277f647394c479cd29469724f9d80$1, questionnaire_id=9e4277f647394c479cd29469724f9d80, version=1, title=Survey Solutions Training, variable=ssolutions_training)\n\n\n\nif client:\n  try:\n    export_object = models.ExportJob(quizid,export_type='STATA')\n  \n    ExportApi(client).start(export_object, wait=True)\n    \n    ExportApi(client, workspace=wkspace).get(questionnaire_identity=quizid,\n                          export_type='STATA',\n                          show_progress=True,\n                          generate=True,\n                          export_path='data/rawdata')\n  except:\n    print(\"Unable to connect to the server\")\nelse:\n  print(\"You did not connect to server\")\n\nUnable to connect to the server",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Download</span>"
    ]
  },
  {
    "objectID": "data-download.html#summary",
    "href": "data-download.html#summary",
    "title": "2  Data Download",
    "section": "2.5 Summary",
    "text": "2.5 Summary\nBelow is a summary of the steps you need to undertake in order to download data from Survey Solutions server to your machine.\n\nCreate API User: Ensure you have an API user created.\n\n\n\nGather Information: Collect the following:\n\nURL\nAPI username\nAPI password\nWorkspace\nQuestionnaire ID\n\nInstall ssaw Module: Use Python to install the ssaw module.\nCreate .ini Config File: Store all necessary information for the Survey Solutions Server.\nRun the Script: Execute the script to download the data!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Download</span>"
    ]
  },
  {
    "objectID": "data-download.html#download-script",
    "href": "data-download.html#download-script",
    "title": "2  Data Download",
    "section": "2.6 Download Script",
    "text": "2.6 Download Script\nThe complete script to download data is given below:\n\n# ----- Modules required\n\nimport requests\nfrom ssaw import Client, ExportApi, QuestionnairesApi, models\nfrom time import sleep\nimport configparser\nimport os\n\n# ---- Define functions\n\ndef check_net(url='http://www.google.com/', timeout=5):\n    try:\n        _ = requests.head(url, timeout=timeout)\n        print(f'Connection available on: {url}')\n        return True\n    except requests.ConnectionError:\n        return False\n    \n# ---- Create configuration if not there or load \n\nconfig = configparser.ConfigParser()\n\nif not os.path.exists('config.ini'):\n  \n   # Add sections and set values for Survey Solutions\n    config['susol'] = {\n        'url': None,\n        'api_user': None,\n        'api_password': None,\n        'workspace': None,\n        'quiz_id': None\n          \n    }\n    \n  # Add the email address and password\n    config['email'] = {\n        'email_address': None,\n        'pass_word':None\n    }\n    \n  # Add the email address and password\n    config['mysql'] = {\n        'host': None,\n        'database': None,\n        'user': None,\n        'password': None\n    }\n  \nelse:\n  # Read the config file\n  config.read('config.ini')\n  \n  \n# ---- Retrieve all the necessary information\n\nurl_ss = config['susol']['url']\napiuser = config['susol']['api_user']\npasswd = config['susol']['api_password']\nwkspace = config['susol']['workspace']\nquizid = config['susol']['quiz_id']\n\n\n# ---- Check whether there is internet connectivity then instantiate Client class\n\nnet_available = check_net()\n\n\nif net_available:\n  try:\n    client = Client(url=url_ss,\n    api_user = apiuser, \n    api_password=passwd,\n    workspace=wkspace)\n  except:\n    client=None\nelse:\n  client=None\n  print(\"Internet not available\")\n  \n  \n# ---- Check whether you are able to communicate with the server\n\nif client:\n  try:\n    for q in QuestionnairesApi(client).get_list(questionnaire_id=quizid):\n      print(\"Success! You have connected successfully to the server!\")\n      print(q.title, q.version)\n  except:\n    print(\"Unable to connect to server\")\nelse:\n  print(\"Configurations need to be checked!\")\n  \n\n# ---- Export Data and Download\n\nif client:\n  try:\n    export_object = models.ExportJob(quizid,export_type='STATA')\n  \n    ExportApi(client).start(export_object, wait=True)\n    \n    ExportApi(client, workspace=wkspace).get(questionnaire_identity=quizid,\n                          export_type='STATA',\n                          show_progress=True,\n                          generate=True,\n                          export_path='data/rawdata')\n  except:\n    print(\"Unable to create export object\")\nelse:\n  print(\"You did not connect to server\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Download</span>"
    ]
  }
]